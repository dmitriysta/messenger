// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "message/internal/models"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

type MessageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageService) EXPECT() *MessageService_Expecter {
	return &MessageService_Expecter{mock: &_m.Mock}
}

// CreateMessage provides a mock function with given fields: ctx, userId, channelId, content
func (_m *MessageService) CreateMessage(ctx context.Context, userId int, channelId int, content string) (*models.Message, error) {
	ret := _m.Called(ctx, userId, channelId, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 *models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) (*models.Message, error)); ok {
		return rf(ctx, userId, channelId, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) *models.Message); ok {
		r0 = rf(ctx, userId, channelId, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = rf(ctx, userId, channelId, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageService_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type MessageService_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int
//   - channelId int
//   - content string
func (_e *MessageService_Expecter) CreateMessage(ctx interface{}, userId interface{}, channelId interface{}, content interface{}) *MessageService_CreateMessage_Call {
	return &MessageService_CreateMessage_Call{Call: _e.mock.On("CreateMessage", ctx, userId, channelId, content)}
}

func (_c *MessageService_CreateMessage_Call) Run(run func(ctx context.Context, userId int, channelId int, content string)) *MessageService_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MessageService_CreateMessage_Call) Return(_a0 *models.Message, _a1 error) *MessageService_CreateMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageService_CreateMessage_Call) RunAndReturn(run func(context.Context, int, int, string) (*models.Message, error)) *MessageService_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessage provides a mock function with given fields: ctx, messageId
func (_m *MessageService) DeleteMessage(ctx context.Context, messageId int) error {
	ret := _m.Called(ctx, messageId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageService_DeleteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessage'
type MessageService_DeleteMessage_Call struct {
	*mock.Call
}

// DeleteMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - messageId int
func (_e *MessageService_Expecter) DeleteMessage(ctx interface{}, messageId interface{}) *MessageService_DeleteMessage_Call {
	return &MessageService_DeleteMessage_Call{Call: _e.mock.On("DeleteMessage", ctx, messageId)}
}

func (_c *MessageService_DeleteMessage_Call) Run(run func(ctx context.Context, messageId int)) *MessageService_DeleteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MessageService_DeleteMessage_Call) Return(_a0 error) *MessageService_DeleteMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageService_DeleteMessage_Call) RunAndReturn(run func(context.Context, int) error) *MessageService_DeleteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageById provides a mock function with given fields: ctx, messageId
func (_m *MessageService) GetMessageById(ctx context.Context, messageId int) (*models.Message, error) {
	ret := _m.Called(ctx, messageId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageById")
	}

	var r0 *models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Message, error)); ok {
		return rf(ctx, messageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Message); ok {
		r0 = rf(ctx, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageService_GetMessageById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageById'
type MessageService_GetMessageById_Call struct {
	*mock.Call
}

// GetMessageById is a helper method to define mock.On call
//   - ctx context.Context
//   - messageId int
func (_e *MessageService_Expecter) GetMessageById(ctx interface{}, messageId interface{}) *MessageService_GetMessageById_Call {
	return &MessageService_GetMessageById_Call{Call: _e.mock.On("GetMessageById", ctx, messageId)}
}

func (_c *MessageService_GetMessageById_Call) Run(run func(ctx context.Context, messageId int)) *MessageService_GetMessageById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MessageService_GetMessageById_Call) Return(_a0 *models.Message, _a1 error) *MessageService_GetMessageById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageService_GetMessageById_Call) RunAndReturn(run func(context.Context, int) (*models.Message, error)) *MessageService_GetMessageById_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessagesByChannelId provides a mock function with given fields: ctx, channelId
func (_m *MessageService) GetMessagesByChannelId(ctx context.Context, channelId int) ([]models.Message, error) {
	ret := _m.Called(ctx, channelId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByChannelId")
	}

	var r0 []models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Message, error)); ok {
		return rf(ctx, channelId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Message); ok {
		r0 = rf(ctx, channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageService_GetMessagesByChannelId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessagesByChannelId'
type MessageService_GetMessagesByChannelId_Call struct {
	*mock.Call
}

// GetMessagesByChannelId is a helper method to define mock.On call
//   - ctx context.Context
//   - channelId int
func (_e *MessageService_Expecter) GetMessagesByChannelId(ctx interface{}, channelId interface{}) *MessageService_GetMessagesByChannelId_Call {
	return &MessageService_GetMessagesByChannelId_Call{Call: _e.mock.On("GetMessagesByChannelId", ctx, channelId)}
}

func (_c *MessageService_GetMessagesByChannelId_Call) Run(run func(ctx context.Context, channelId int)) *MessageService_GetMessagesByChannelId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MessageService_GetMessagesByChannelId_Call) Return(_a0 []models.Message, _a1 error) *MessageService_GetMessagesByChannelId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageService_GetMessagesByChannelId_Call) RunAndReturn(run func(context.Context, int) ([]models.Message, error)) *MessageService_GetMessagesByChannelId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMessage provides a mock function with given fields: ctx, message
func (_m *MessageService) UpdateMessage(ctx context.Context, message *models.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageService_UpdateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMessage'
type MessageService_UpdateMessage_Call struct {
	*mock.Call
}

// UpdateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *models.Message
func (_e *MessageService_Expecter) UpdateMessage(ctx interface{}, message interface{}) *MessageService_UpdateMessage_Call {
	return &MessageService_UpdateMessage_Call{Call: _e.mock.On("UpdateMessage", ctx, message)}
}

func (_c *MessageService_UpdateMessage_Call) Run(run func(ctx context.Context, message *models.Message)) *MessageService_UpdateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Message))
	})
	return _c
}

func (_c *MessageService_UpdateMessage_Call) Return(_a0 error) *MessageService_UpdateMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageService_UpdateMessage_Call) RunAndReturn(run func(context.Context, *models.Message) error) *MessageService_UpdateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageService creates a new instance of MessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageService {
	mock := &MessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
